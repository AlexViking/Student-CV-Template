/**
 * Main application functionality
 */

// Initialize the application when the DOM is loaded
document.addEventListener('DOMContentLoaded', function () {
	// Check if this is the first time launching the app
	if (!localStorage.getItem('appInitialized')) {
		initializeApp();
	}

	// Add event listeners for nav items if they exist
	const navItems = document.querySelectorAll('nav .nav-item');
	if (navItems.length) {
		navItems.forEach(item => {
			item.addEventListener('click', handleNavigation);
		});
	}

	// Add button to navigate to Game Platform
	addGamePlatformButton();
});

/**
 * Initialize the application with default data
 */
function initializeApp() {
	// Set flag to prevent re-initialization
	localStorage.setItem('appInitialized', 'true');

	// Set default personal info if not present
	if (!localStorage.getItem('personalInfo')) {
		const defaultInfo = {
			name: 'Student Name',
			title: 'Web Development Student',
			about: 'I am a student learning web development through an innovative gamified learning platform.'
		};
		localStorage.setItem('personalInfo', JSON.stringify(defaultInfo));
	}

	// Initialize empty achievements array
	if (!localStorage.getItem('achievements')) {
		localStorage.setItem('achievements', JSON.stringify([]));
	}

	// Initialize empty verified keys array
	if (!localStorage.getItem('verifiedKeys')) {
		localStorage.setItem('verifiedKeys', JSON.stringify([]));
	}

	// Log initialization
	console.log('Application initialized with default data');
}

/**
 * Handle navigation click events
 * @param {Event} e - The click event
 */
function handleNavigation(e) {
	e.preventDefault();
	const target = e.currentTarget.getAttribute('data-target');

	// Hide all sections
	document.querySelectorAll('main section').forEach(section => {
		section.style.display = 'none';
	});

	// Show target section
	document.getElementById(target).style.display = 'block';

	// Update active nav item
	document.querySelectorAll('nav .nav-item').forEach(item => {
		item.classList.remove('active');
	});
	e.currentTarget.classList.add('active');
}

/**
 * Add a button to navigate to the Game Platform
 */
function addGamePlatformButton() {
	const mainElement = document.querySelector('main');

	const platformSection = document.createElement('section');
	platformSection.id = 'platform-link';

	platformSection.innerHTML = `
        <h2>Learning Games Platform</h2>
        <p>Ready to improve your skills? Visit our Game Platform to access interactive learning games and earn achievement keys.</p>
        <a href="https://AlexViking.github.io/game-platform" class="pixel-btn" target="_blank">Go to Game Platform</a>
    `;

	mainElement.appendChild(platformSection);
}

/**
 * Helper function to generate a sample achievement key for testing
 * This would normally be generated by the learning game
 */
window.generateSampleKey = function () {
	// Sample achievement data
	const sampleData = {
		gameId: "html-basics-1",
		timestamp: Math.floor(Date.now() / 1000),
		achievements: [
			{
				skillId: "html",
				points: 15,
				level: 1,
				description: "Completed HTML basics challenge"
			},
			{
				skillId: "problem-solving",
				points: 5,
				level: 1,
				description: "Solved beginner code problems"
			}
		],
		// Simple signature for demo purposes
		signature: "demo-signature-12345"
	};

	// Convert to base64
	const jsonString = JSON.stringify(sampleData);
	const base64Key = btoa(jsonString);

	// Copy to clipboard
	navigator.clipboard.writeText(base64Key)
		.then(() => {
			alert("Sample key generated and copied to clipboard! Paste it in the key field to test.");
		})
		.catch(err => {
			console.error('Could not copy text: ', err);
			alert("Sample key generated: " + base64Key);
		});

	return base64Key;
};

// Add a console message for developers
console.log("Developer tools available: generateSampleKey() - creates test achievement key");